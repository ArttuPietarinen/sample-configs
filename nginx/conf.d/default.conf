###############################
# Oskari reverse proxy
###############################

# Jetty with oskari-map.war
upstream oskariserver {
    server localhost:8080;
}

# Jetty with transport.war
upstream transport {
    server localhost:8081;
}

# Jetty with geoserver
upstream geoserver {
    server localhost:8082;
}

# websocket mapping
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    ## replace localhost with the your domain name
    server_name  localhost;
    listen       80 default_server;

    # static files - you should have Oskari frontend code on /opt/public/oskari directory or change this path
    root /opt/public/;
    index  index.html index.htm;

    # ssl config - optional, but recommended for offering https-urls
    listen       443 ssl;
    ssl_certificate /etc/nginx/ssl/public.crt;
    ssl_certificate_key /etc/nginx/ssl/private.rsa;

    # ssl security settings - optional, but recommended
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
    server_tokens off;
    # /ssl config

    #access_log  logs/host.access.log  main;

    # Oskari-server Jetty location
    location / {
        proxy_pass http://oskariserver;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header Host $http_host;
    }

    # Oskari frontend files
    location ^~ /Oskari/ {
        expires -1;
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        rewrite ^/Oskari/(.*)$ $1 break;
        try_files /oskari/$1 oskari/$1/ =404;
    }

    # WFS-transport Jetty
    location ^~ /transport {
        proxy_pass http://transport;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Geoserver Jetty - NOTE! access is only allowed for single IP
    # Note! This is a convenience config to access geoserver. It's not needed for Oskari to work so you can remove it at will
    location ^~ /geoserver {
        # Restrict connections to single ip - EDIT IP FOR YOU ENVIRONMENT
        allow 1.2.3.4/32; deny all;

        proxy_pass http://geoserver;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
    }

    # SSL maplayer tile proxying (optional, required for https tiles from services without https-support)
    # requires DNS resolver configured in ../nginx.conf -> resolver a.b.c.d;
    location ^~ /tiles/ {
        # Restrict accesss to requests with current domain as referer - EDIT THE DOMAIN
        if ($http_referer !~ "https://your.host.com/"){
          return 403;
        }

        rewrite ^/tiles/(.*)$ $1 break;
        proxy_pass http://$1$is_args$args;
    }

}
